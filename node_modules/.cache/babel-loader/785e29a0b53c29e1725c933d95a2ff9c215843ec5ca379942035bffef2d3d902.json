{"ast":null,"code":"import { combineReducers } from \"redux\";\nconst initMember = {\n  \"members\": [{\n    name: \"Julia\",\n    position: \"President\",\n    pic: \"member1.jpg\"\n  }, {\n    name: \"David\",\n    position: \"Vice President\",\n    pic: \"member2.jpg\"\n  }, {\n    name: \"Emily\",\n    position: \"UI Designer\",\n    pic: \"member3.jpg\"\n  }, {\n    name: \"Paul\",\n    position: \"Front-end Engineer\",\n    pic: \"member4.jpg\"\n  }, {\n    name: \"Sara\",\n    position: \"Back-end Engineer\",\n    pic: \"member5.jpg\"\n  }, {\n    name: \"Michael\",\n    position: \"Project Manager\",\n    pic: \"member6.jpg\"\n  }]\n};\n//초기 데이터를 state에 저장했다가 추구 action객체가 전달되면\n//액션의 타입에 따라서 기존의 데이터(state)를 변경해서 리턴하는 함수\n//\nconst memberReducer = (state = initMember, action) => {\n  switch (action.type) {\n    case \"SET_MEMBERS\":\n      return {\n        ...state,\n        members: action.payload\n      };\n    default:\n      return state;\n  }\n  //상태값이 변화가 없습니다\n  //왜냐하면 member를 추가하는 것이 아니라 state값을 가지고 와서 사용하는 목적이라서 \n  //지금 예제에서는 상태값의 변화는 없습니다\n};\n\nconst reducers = combineReducers;\nexport default reducers;\n\n/*\r\n라이브러리\r\n\r\nuseFeducer는 리액트의 내장된 hook중 하나로\r\n리액트 애플리케이션 상태관리를 위한 방법입니다\r\n\r\n반면 Fedux는 별도의 라이브러리로 리액트와 독립적으로 사용이 가능하며\r\n어플리케이션의 전역상태관리를 위한 고급 도구입니다\r\n\r\n범위\r\n\r\nuseReducer는 일반적으로 컴포넌트 내부에서 상태를 관리합니다\r\n한 컴포넌트 내에서만 상태를 공유하고 업데이트하고 이렇게 지역적입니다\r\n\r\n반면에 Redux는 여러 컴포넌트에서 전역 상태를 공유하고 업데이트하고 이렇게 전역적입니다\r\n*/","map":{"version":3,"names":["combineReducers","initMember","name","position","pic","memberReducer","state","action","type","members","payload","reducers"],"sources":["C:/Users/woori/Desktop/react_start (왕최신 10월16일)/src/redux/reducer.js"],"sourcesContent":["import { combineReducers } from \"redux\";\r\n\r\nconst initMember = {\r\n    \"members\": [\r\n        {\r\n            name: \"Julia\",\r\n            position: \"President\",\r\n            pic: \"member1.jpg\"\r\n        },\r\n        {\r\n            name: \"David\",\r\n            position: \"Vice President\",\r\n            pic: \"member2.jpg\"\r\n        },\r\n        {\r\n            name: \"Emily\",\r\n            position: \"UI Designer\",\r\n            pic: \"member3.jpg\"\r\n        },\r\n        {\r\n            name: \"Paul\",\r\n            position: \"Front-end Engineer\",\r\n            pic: \"member4.jpg\"\r\n        },\r\n        {\r\n            name: \"Sara\",\r\n            position: \"Back-end Engineer\",\r\n            pic: \"member5.jpg\"\r\n        },\r\n        {\r\n            name: \"Michael\",\r\n            position: \"Project Manager\",\r\n            pic: \"member6.jpg\"\r\n        }\r\n    ]\r\n}\r\n//초기 데이터를 state에 저장했다가 추구 action객체가 전달되면\r\n//액션의 타입에 따라서 기존의 데이터(state)를 변경해서 리턴하는 함수\r\n//\r\nconst memberReducer = (state = initMember, action) => {\r\n    switch(action.type) {\r\n        case \"SET_MEMBERS\":\r\n            return {...state, members: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n    //상태값이 변화가 없습니다\r\n    //왜냐하면 member를 추가하는 것이 아니라 state값을 가지고 와서 사용하는 목적이라서 \r\n    //지금 예제에서는 상태값의 변화는 없습니다\r\n}\r\nconst reducers = combineReducers\r\n\r\nexport default reducers\r\n\r\n/*\r\n라이브러리\r\n\r\nuseFeducer는 리액트의 내장된 hook중 하나로\r\n리액트 애플리케이션 상태관리를 위한 방법입니다\r\n\r\n반면 Fedux는 별도의 라이브러리로 리액트와 독립적으로 사용이 가능하며\r\n어플리케이션의 전역상태관리를 위한 고급 도구입니다\r\n\r\n범위\r\n\r\nuseReducer는 일반적으로 컴포넌트 내부에서 상태를 관리합니다\r\n한 컴포넌트 내에서만 상태를 공유하고 업데이트하고 이렇게 지역적입니다\r\n\r\n반면에 Redux는 여러 컴포넌트에서 전역 상태를 공유하고 업데이트하고 이렇게 전역적입니다\r\n*/"],"mappings":"AAAA,SAASA,eAAe,QAAQ,OAAO;AAEvC,MAAMC,UAAU,GAAG;EACf,SAAS,EAAE,CACP;IACIC,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,WAAW;IACrBC,GAAG,EAAE;EACT,CAAC,EACD;IACIF,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,gBAAgB;IAC1BC,GAAG,EAAE;EACT,CAAC,EACD;IACIF,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,aAAa;IACvBC,GAAG,EAAE;EACT,CAAC,EACD;IACIF,IAAI,EAAE,MAAM;IACZC,QAAQ,EAAE,oBAAoB;IAC9BC,GAAG,EAAE;EACT,CAAC,EACD;IACIF,IAAI,EAAE,MAAM;IACZC,QAAQ,EAAE,mBAAmB;IAC7BC,GAAG,EAAE;EACT,CAAC,EACD;IACIF,IAAI,EAAE,SAAS;IACfC,QAAQ,EAAE,iBAAiB;IAC3BC,GAAG,EAAE;EACT,CAAC;AAET,CAAC;AACD;AACA;AACA;AACA,MAAMC,aAAa,GAAGA,CAACC,KAAK,GAAGL,UAAU,EAAEM,MAAM,KAAK;EAClD,QAAOA,MAAM,CAACC,IAAI;IACd,KAAK,aAAa;MACd,OAAO;QAAC,GAAGF,KAAK;QAAEG,OAAO,EAAEF,MAAM,CAACG;MAAO,CAAC;IAC9C;MACI,OAAOJ,KAAK;EACpB;EACA;EACA;EACA;AACJ,CAAC;;AACD,MAAMK,QAAQ,GAAGX,eAAe;AAEhC,eAAeW,QAAQ;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}