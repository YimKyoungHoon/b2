{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\woori\\\\Desktop\\\\\\uC784\\uACBD\\uD6C8 \\uC870\\uC724\\uC2DD \\uC606\\uC790\\uB9AC \\uC7A0\\uAE50 \\uCC28\\uC9C0\\\\src\\\\components\\\\main\\\\Btns.js\",\n  _s = $RefreshSig$();\nimport { useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Btns() {\n  _s();\n  //가상돔 main요소를 담을 빈 참조 객체를 생성\n  const btnRef = useRef(null);\n  //섹션별 세로 위치값을 담을 빈배열로 참조 객체를 생성\n  const pos = useRef([]);\n  const getPos = () => {\n    pos.current = []; //다시 호출되었을때 기존의 배열을 리셋하기 위해서 \n    const sections = btnRef.current.parentElement.querySelectorAll(\".myScroll\");\n    //1 기본for문으로 반복돌기\n    for (const el of sections) pos.current.push(el.offsetTop);\n    //2 배열로 변환한다음 map을 이용해서 반복돌기 \n  };\n  //버튼, 박스활성화 함수\n  const activation = () => {\n    const btns = btnRef.current.children;\n    const sections = btnRef.current.parentElement.querySelectorAll(\".myScroll\");\n    const scroll = window.scrollY;\n    const base = -window.innerHeight / 3;\n    pos.current.map((el, index) => {\n      if (scroll >= el + base) {\n        for (const btn of btns) btn.classList.remove(\"on\");\n        for (const section of sections) section.classList.remove(\"on\");\n        btns[index].classList.add(\"on\");\n        sections[index].classList.add(\"on\");\n      }\n    });\n  };\n  useEffect(() => {\n    //세로 위치값을 초기화하는 작업\n    window.scrollTo({\n      top: 0,\n      left: 0,\n      behavior: \"smooth\"\n    });\n    getPos();\n    //브라우저가 리사이즈 될때도 \n    window.addEventListener(\"resize\", getPos);\n    /*브라우저 리사이즈될때 요소의 탈락/추가로 인해서\r\n    세로 위치값이 변화가 있을 수 있기 때문이다 */\n    window.addEventListener(\"scroll\", activation);\n    return () => {\n      window.removeEventListener(\"resize\", getPos);\n      window.removeEventListener(\"scroll\", activation);\n      /*window객체는 최상의 전역 객체이기 때문에\r\n      윈도우 객체에 이벤트를 연결할 때 해당 이벤트가 다른 컴포넌트에 영향을 미칩니다\r\n      다른 컴포넌트에도 실행되는게 아니라면 해당 컴포넌트(btns.js)가 언마운트될때\r\n      클린업 함수로 이벤트 연결을 제거해야합니다 \r\n      */\n    };\n  }, []); //컴포넌트가 처음 마운트 될때 작업\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"scroll_navi\",\n    ref: btnRef,\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"on\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n_s(Btns, \"FTxxy//aQ39Hn+9V9mUcfDb5A9M=\");\n_c = Btns;\nexport default Btns;\nvar _c;\n$RefreshReg$(_c, \"Btns\");","map":{"version":3,"names":["useRef","useEffect","jsxDEV","_jsxDEV","Btns","_s","btnRef","pos","getPos","current","sections","parentElement","querySelectorAll","el","push","offsetTop","activation","btns","children","scroll","window","scrollY","base","innerHeight","map","index","btn","classList","remove","section","add","scrollTo","top","left","behavior","addEventListener","removeEventListener","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/woori/Desktop/임경훈 조윤식 옆자리 잠깐 차지/src/components/main/Btns.js"],"sourcesContent":["import { useRef, useEffect } from \"react\";\r\nfunction Btns() {\r\n    //가상돔 main요소를 담을 빈 참조 객체를 생성\r\n    const btnRef = useRef(null);\r\n    //섹션별 세로 위치값을 담을 빈배열로 참조 객체를 생성\r\n    const pos = useRef([]);\r\n    const getPos = () => {\r\n        pos.current = []; //다시 호출되었을때 기존의 배열을 리셋하기 위해서 \r\n        const sections = btnRef.current.parentElement.querySelectorAll(\".myScroll\");\r\n        //1 기본for문으로 반복돌기\r\n        for (const el of sections) pos.current.push(el.offsetTop);\r\n        //2 배열로 변환한다음 map을 이용해서 반복돌기 \r\n\r\n    }\r\n    //버튼, 박스활성화 함수\r\n    const activation = () => {\r\n        const btns = btnRef.current.children;\r\n        const sections = btnRef.current.parentElement.querySelectorAll(\".myScroll\");\r\n        const scroll = window.scrollY;\r\n        const base = -window.innerHeight / 3;\r\n\r\n        pos.current.map((el, index) => {\r\n            if (scroll >= el + base) {\r\n                for (const btn of btns) btn.classList.remove(\"on\");\r\n                for (const section of sections) section.classList.remove(\"on\");\r\n                btns[index].classList.add(\"on\");\r\n                sections[index].classList.add(\"on\");\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        //세로 위치값을 초기화하는 작업\r\n        window.scrollTo({ top: 0, left: 0, behavior: \"smooth\" });\r\n        getPos();\r\n        //브라우저가 리사이즈 될때도 \r\n        window.addEventListener(\"resize\", getPos);\r\n        /*브라우저 리사이즈될때 요소의 탈락/추가로 인해서\r\n        세로 위치값이 변화가 있을 수 있기 때문이다 */\r\n        window.addEventListener(\"scroll\", activation);\r\n        return () => {\r\n            window.removeEventListener(\"resize\", getPos);\r\n            window.removeEventListener(\"scroll\", activation);\r\n            /*window객체는 최상의 전역 객체이기 때문에\r\n            윈도우 객체에 이벤트를 연결할 때 해당 이벤트가 다른 컴포넌트에 영향을 미칩니다\r\n            다른 컴포넌트에도 실행되는게 아니라면 해당 컴포넌트(btns.js)가 언마운트될때\r\n            클린업 함수로 이벤트 연결을 제거해야합니다 \r\n            */\r\n        }\r\n    }, []); //컴포넌트가 처음 마운트 될때 작업\r\n    return (\r\n        <ul className=\"scroll_navi\" ref={btnRef}>\r\n            <li className=\"on\"></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Btns"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}